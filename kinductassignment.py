# -*- coding: utf-8 -*-
"""KinductAssignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pec3aA8rCf3QuWmE19oOgLVj2-hgUTFE

## Data Loading and Data Cleaning
"""

import pandas as pd

#Loading Goalies.csv data into a data frame in pandas
df=pd.read_csv('/content/drive/MyDrive/Goalies.csv',encoding='utf8', engine='python',usecols=range(0, 23))#specifying 23 coloumns as is only have 23 coloums
df

"""## Data Preparation 

Fields that are relevant to this exercise listed below were loaded in to Data dataframe:

* playerID: Player ID
* year: Year (2005-06 listed as "2005")
* tmID: Team ID
* GP: Games played
* Min: Minutes
* W: Wins
* T/OL: Ties / overtime losses
* ENG: Empty net goals
* SHO: Shutouts
* GA: Goals against
* SA: Shots against
"""

#Getting the coloumns we only require for this assignmnet

Data=df[['playerID','year','tmID','GP','Min','W','L','T/OL','ENG','SHO','GA','SA']]

#Giving condition as specified in the document 2005-06 listed as "2005")

RequiredData=Data[Data['year']==2005]

# Displaying the data frame according to the requirement  

RequiredData

"""## Output 1. tmID: string"""

#Converting and Updating tmID to string data type with astype('str') function in pandas 
RequiredData['tmID']=RequiredData['tmID'].astype('str')

#To check the data type casting please run below line
# print(RequiredData['tmID'].dtype)

#Teams participated in the year 2005-2006 and their partipaction count of each team
RequiredData.groupby(['tmID']).size()

"""## Output 2 year: Year"""

#Converting and Updating Year in int64 data type to datetime64 with to_datetime() function in pandas 

RequiredData['year']= pd.to_datetime(RequiredData['year'], format='%Y')

print(RequiredData['year'].dtype)

Year.count()

RequiredData

"""## Output 3. Wins_agg: total wins / total players

####There were few records where playerID is repeated. So, i have performed groupby and size functions to find repetation of players and their replucation counts. Then to get Number of players participated I have used length function on this groupby data frame####
"""

#To see count of each playerID please execute below line 
#print(RequiredData.groupby(['playerID']).size())

TotalPlayers= len(RequiredData.groupby(['playerID']))
TotalPlayers

TotalWins=RequiredData['W'].sum()
TotalWins

Wins_agg=TotalWins/TotalPlayers
Wins_agg

"""## Output 4. Losses_agg: total losses / total players"""

TotalLosses=RequiredData['L'].sum()
TotalLosses

Loss_agg=TotalLosses/TotalPlayers
Loss_agg

"""## Output 5. GP_agg: total games played / total players"""

TotalGamesPlayed=RequiredData['GP'].sum()
TotalGamesPlayed

GP_agg=TotalGamesPlayed/TotalPlayers
GP_agg

"""## Output 6. Mins_over_GA_agg: total minutes played / total goals against"""

TotalMinutesPlayed=RequiredData['Min'].sum()
TotalMinutesPlayed

TotalGoalsAgainst=RequiredData['GA'].sum()
TotalGoalsAgainst

Mins_over_GA_agg=TotalMinutesPlayed/TotalGoalsAgainst
Mins_over_GA_agg

"""## Output 7. GA_over_SA_agg: total goals against / total shots against"""

TotalShotsAgainst=RequiredData['SA'].sum()
TotalShotsAgainst

GA_over_SA_agg=TotalGoalsAgainst/TotalShotsAgainst
GA_over_SA_agg

"""## Output 8. avg_percentage_wins: calculate the percentage of games won for each player, then take the mean at team level

"""



"""## Output 9. most_goals_stopped: {‘playerID’: playerID, ‘goals_stopped’: goals_stopped}
Description: calculate goals stopped per player, then take the player with the max goals stopped and put the details in the dictionary

"""



"""## Output 10. most_efficient_player: {‘playerID’: playerID, ‘efficiency’: goals_stopped / minutes played}
Description: calculate the goals stopped per minutes of play for each player, then take the player with the max efficiency just calculated and put the details in the dictionary
"""

